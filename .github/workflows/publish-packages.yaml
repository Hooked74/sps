name: Publish Packages
on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  CI: true

permissions:
  contents: write
  packages: write

jobs:
  publish:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 18
      LERNA_UPPER_VERSION_TYPE: $(echo "${{ github.event.pull_request.title }}" | grep -Eo '\[[a-z]+\]' | grep -Eo 'minor|major' || true)
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: package-lock.json
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"
          scope: "@h74-sps"

      - name: Install Dependencies
        run: |
          npm ci

      - name: Bootstrap Lerna Dependecies
        run: |
          if [ ! -z ${{ env.LERNA_UPPER_VERSION_TYPE }} ]; then
            npm run deps:packages:bootstrap
          else
            npm run deps:packages:bootstrap:since
          fi

      - name: Build Packages
        run: |
          if [ ! -z ${{ env.LERNA_UPPER_VERSION_TYPE }} ]; then
            npm run build
          else
            npm run build:since
          fi

      - name: Git Identity
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor}}@users.noreply.github.com"

      - name: "Version And Publish"
        run: |
          LERNA_VERSION_TYPE=${{ env.LERNA_UPPER_VERSION_TYPE }}
          if [ -z $LERNA_VERSION_TYPE ]; then
            LERNA_VERSION_TYPE=patch
          fi;

          npx lerna version $LERNA_VERSION_TYPE --conventional-commits --changelog-preset angular --no-commit-hooks -m "chore(#${{ github.event.number }}): publish %s" --create-release github --yes
          npx lerna publish from-git --yes
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
